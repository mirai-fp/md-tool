2025-01-21 03:21:18.010016+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SALES_DATA" not found (this database is empty); SQL statement:
insert into sales_data (barcode,brand_code,child_category,child_product_type,color,cs_code,gender,order_date,order_quantity,original_price,parent_category,parent_product_type,price_type,product_name,selling_price,selling_type,shop_name,size,total_amount,id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,default) [42104-232]
2025-01-28 15:39:14.923041+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLFeatureNotSupportedException: 機能はサポートされていません: "CHARACTER VARYING(255)"
Feature not supported: "CHARACTER VARYING(255)"; SQL statement:
alter table if exists sales_data alter column id set data type varchar(255) [50100-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:568)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.getUnsupportedException(DbException.java:287)
	at org.h2.command.ddl.SequenceOptions.getBounds(SequenceOptions.java:316)
	at org.h2.command.ddl.SequenceOptions.getBounds(SequenceOptions.java:244)
	at org.h2.command.ddl.SequenceOptions.<init>(SequenceOptions.java:73)
	at org.h2.command.Parser.parseAlterTableAlterColumnDataType(Parser.java:8515)
	at org.h2.command.Parser.parseAlterTableAlterColumnSet(Parser.java:8176)
	at org.h2.command.Parser.parseAlterTableAlter(Parser.java:8120)
	at org.h2.command.Parser.parseAlterTable(Parser.java:8038)
	at org.h2.command.Parser.parseAlter(Parser.java:7078)
	at org.h2.command.Parser.parsePrepared(Parser.java:629)
	at org.h2.command.Parser.parse(Parser.java:581)
	at org.h2.command.Parser.parse(Parser.java:556)
	at org.h2.command.Parser.prepareCommand(Parser.java:484)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:645)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:561)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1506)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:970)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.example.mdtool.MdToolApplication.main(MdToolApplication.java:10)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
2025-01-28 15:39:46.464332+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: データ変換中にエラーが発生しました "AGPAO1122001/AGYHS0922001/AGYHS1021001/GVYHS0920001BEG/FREE2025-01-18"
Data conversion error converting "AGPAO1122001/AGYHS0922001/AGYHS1021001/GVYHS0920001BEG/FREE2025-01-18"; SQL statement:
select sd1_0.id,sd1_0.barcode,sd1_0.brand_code,sd1_0.child_category,sd1_0.child_product_type,sd1_0.color,sd1_0.cs_code,sd1_0.gender,sd1_0.item_hash_code,sd1_0.order_date,sd1_0.order_quantity,sd1_0.original_price,sd1_0.parent_category,sd1_0.parent_product_type,sd1_0.price_type,sd1_0.product_name,sd1_0.selling_price,sd1_0.selling_type,sd1_0.shop_name,sd1_0.size,sd1_0.total_amount from sales_data sd1_0 where sd1_0.id=? [22018-232]
2025-01-28 15:40:01.696579+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: データ変換中にエラーが発生しました "AGPAO1122001/AGYHS0922001/AGYHS1021001/GVYHS0920001BEG/FREE2025-01-18"
Data conversion error converting "AGPAO1122001/AGYHS0922001/AGYHS1021001/GVYHS0920001BEG/FREE2025-01-18"; SQL statement:
select sd1_0.id,sd1_0.barcode,sd1_0.brand_code,sd1_0.child_category,sd1_0.child_product_type,sd1_0.color,sd1_0.cs_code,sd1_0.gender,sd1_0.item_hash_code,sd1_0.order_date,sd1_0.order_quantity,sd1_0.original_price,sd1_0.parent_category,sd1_0.parent_product_type,sd1_0.price_type,sd1_0.product_name,sd1_0.selling_price,sd1_0.selling_type,sd1_0.shop_name,sd1_0.size,sd1_0.total_amount from sales_data sd1_0 where sd1_0.id=? [22018-232]
2025-01-28 16:45:38.904423+09:00 database: wrong user or password; user: "SA"
org.h2.message.DbException: ユーザ名またはパスワードが不正です
Wrong user name or password [28000-232]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:344)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124)
	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:291)
	at org.h2.server.web.WebServer.getConnection(WebServer.java:811)
	at org.h2.server.web.WebApp.login(WebApp.java:1038)
	at org.h2.server.web.WebApp.process(WebApp.java:226)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: ユーザ名またはパスワードが不正です
Wrong user name or password [28000-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:522)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 50 more
2025-01-28 17:24:53.474597+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(合計金額[*]（税抜）) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    daily_sales,\000d\000a    prev_daily_sales,\000d\000a    sales_diff,\000d\000a    sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"
Syntax error in SQL statement "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(合計金額[*]（税抜）) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    daily_sales,\000d\000a    prev_daily_sales,\000d\000a    sales_diff,\000d\000a    sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(合計金額（税抜）) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    daily_sales,
    prev_daily_sales,
    sales_diff,
    sales_diff_percentage
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [42000-232]
2025-01-28 17:28:31.860848+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: 関数 "FORMAT" が見つかりません
Function "FORMAT" not found; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(TOTAL_AMOUNT) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    FORMAT(daily_sales, 0),
    FORMAT(prev_daily_sales, 0),
    FORMAT(sales_diff, 0),
    FORMAT(sales_diff_percentage, 2)
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [90022-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTermWithIdentifier(Parser.java:5142)
	at org.h2.command.Parser.readTerm(Parser.java:4828)
	at org.h2.command.Parser.readFactor(Parser.java:3323)
	at org.h2.command.Parser.readSum(Parser.java:3310)
	at org.h2.command.Parser.readConcat(Parser.java:3275)
	at org.h2.command.Parser.readCondition(Parser.java:3065)
	at org.h2.command.Parser.readExpression(Parser.java:2985)
	at org.h2.command.Parser.parseSelectExpressions(Parser.java:2785)
	at org.h2.command.Parser.parseSelect(Parser.java:2803)
	at org.h2.command.Parser.parseQueryPrimary(Parser.java:2692)
	at org.h2.command.Parser.parseQueryTerm(Parser.java:2547)
	at org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2526)
	at org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2519)
	at org.h2.command.Parser.parseQueryExpression(Parser.java:2505)
	at org.h2.command.Parser.parseQuery(Parser.java:2479)
	at org.h2.command.Parser.parsePrepared(Parser.java:610)
	at org.h2.command.Parser.parse(Parser.java:581)
	at org.h2.command.Parser.parse(Parser.java:556)
	at org.h2.command.Parser.prepareCommand(Parser.java:484)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:645)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:561)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1344)
	at org.h2.server.web.WebApp.query(WebApp.java:1142)
	at org.h2.server.web.WebApp.query(WebApp.java:1118)
	at org.h2.server.web.WebApp.process(WebApp.java:244)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-01-28 17:29:37.812112+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0)),\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0)),\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0)),\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2)\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; 期待されるステートメント "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"
Syntax error in SQL statement "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0)),\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0)),\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0)),\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2)\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; expected "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(TOTAL_AMOUNT) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    CAST(daily_sales, AS DECIMAL(12, 0)),
    CAST(prev_daily_sales, AS DECIMAL(12, 0)),
    CAST(sales_diff, AS DECIMAL(12, 0)),
    CAST(sales_diff_percentage, AS DECIMAL(12, 2)
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [42001-232]
2025-01-28 17:30:19.329578+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0)) AS daily_sales,\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0)) AS prev_daily_sales,\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0)) AS sales_diff,\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; 期待されるステートメント "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"
Syntax error in SQL statement "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0)) AS daily_sales,\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0)) AS prev_daily_sales,\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0)) AS sales_diff,\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; expected "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(TOTAL_AMOUNT) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    CAST(daily_sales, AS DECIMAL(12, 0)) AS daily_sales,
    CAST(prev_daily_sales, AS DECIMAL(12, 0)) AS prev_daily_sales,
    CAST(sales_diff, AS DECIMAL(12, 0)) AS sales_diff,
    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [42001-232]
2025-01-28 17:30:34.666005+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0))  AS daily_sales,\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0))  AS prev_daily_sales,\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0))  AS sales_diff,\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; 期待されるステートメント "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"
Syntax error in SQL statement "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales[*], AS DECIMAL(12, 0))  AS daily_sales,\000d\000a    CAST(prev_daily_sales, AS DECIMAL(12, 0))  AS prev_daily_sales,\000d\000a    CAST(sales_diff, AS DECIMAL(12, 0))  AS sales_diff,\000d\000a    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; expected "(, ., [, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, AS"; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(TOTAL_AMOUNT) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    CAST(daily_sales, AS DECIMAL(12, 0))  AS daily_sales,
    CAST(prev_daily_sales, AS DECIMAL(12, 0))  AS prev_daily_sales,
    CAST(sales_diff, AS DECIMAL(12, 0))  AS sales_diff,
    CAST(sales_diff_percentage, AS DECIMAL(12, 2) AS sales_diff_percentage
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [42001-232]
2025-01-28 17:31:22.068157+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales AS DECIMAL(12, 0))  AS daily_sales,\000d\000a    CAST(prev_daily_sales AS DECIMAL(12, 0))  AS prev_daily_sales,\000d\000a    CAST(sales_diff AS DECIMAL(12, 0))  AS sales_diff,\000d\000a    CAST(sales_diff_percentage AS DECIMAL(12, 2) [*]AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; 期待されるステートメント "ARRAY, FORMAT, )"
Syntax error in SQL statement "WITH DailySales AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        SUM(TOTAL_AMOUNT) AS daily_sales\000d\000a    FROM\000d\000a        SALES_DATA\000d\000a    GROUP BY\000d\000a        PRODUCT_NAME, BRAND_CODE, ORDER_DATE\000d\000a),\000d\000aSalesWithLag AS (\000d\000a    SELECT\000d\000a        ds.PRODUCT_NAME,\000d\000a        ds.BRAND_CODE,\000d\000a        ds.ORDER_DATE,\000d\000a        ds.daily_sales,\000d\000a        LAG(ds.daily_sales) OVER (\000d\000a            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE \000d\000a            ORDER BY ds.ORDER_DATE\000d\000a        ) AS prev_daily_sales\000d\000a    FROM\000d\000a        DailySales ds\000d\000a),\000d\000aSalesChange AS (\000d\000a    SELECT\000d\000a        PRODUCT_NAME,\000d\000a        BRAND_CODE,\000d\000a        ORDER_DATE,\000d\000a        daily_sales,\000d\000a        prev_daily_sales,\000d\000a        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,\000d\000a        CASE\000d\000a            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100\000d\000a            ELSE NULL\000d\000a        END AS sales_diff_percentage\000d\000a    FROM\000d\000a        SalesWithLag\000d\000a)\000d\000aSELECT\000d\000a    PRODUCT_NAME,\000d\000a    BRAND_CODE,\000d\000a    ORDER_DATE,\000d\000a    CAST(daily_sales AS DECIMAL(12, 0))  AS daily_sales,\000d\000a    CAST(prev_daily_sales AS DECIMAL(12, 0))  AS prev_daily_sales,\000d\000a    CAST(sales_diff AS DECIMAL(12, 0))  AS sales_diff,\000d\000a    CAST(sales_diff_percentage AS DECIMAL(12, 2) [*]AS sales_diff_percentage\000d\000aFROM\000d\000a    SalesChange\000d\000aWHERE\000d\000a    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合\000d\000aORDER BY\000d\000a    ORDER_DATE, PRODUCT_NAME, BRAND_CODE"; expected "ARRAY, FORMAT, )"; SQL statement:
WITH DailySales AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        SUM(TOTAL_AMOUNT) AS daily_sales
    FROM
        SALES_DATA
    GROUP BY
        PRODUCT_NAME, BRAND_CODE, ORDER_DATE
),
SalesWithLag AS (
    SELECT
        ds.PRODUCT_NAME,
        ds.BRAND_CODE,
        ds.ORDER_DATE,
        ds.daily_sales,
        LAG(ds.daily_sales) OVER (
            PARTITION BY ds.PRODUCT_NAME, ds.BRAND_CODE 
            ORDER BY ds.ORDER_DATE
        ) AS prev_daily_sales
    FROM
        DailySales ds
),
SalesChange AS (
    SELECT
        PRODUCT_NAME,
        BRAND_CODE,
        ORDER_DATE,
        daily_sales,
        prev_daily_sales,
        daily_sales - COALESCE(prev_daily_sales, 0) AS sales_diff,
        CASE
            WHEN prev_daily_sales > 0 THEN (daily_sales - prev_daily_sales) / prev_daily_sales * 100
            ELSE NULL
        END AS sales_diff_percentage
    FROM
        SalesWithLag
)
SELECT
    PRODUCT_NAME,
    BRAND_CODE,
    ORDER_DATE,
    CAST(daily_sales AS DECIMAL(12, 0))  AS daily_sales,
    CAST(prev_daily_sales AS DECIMAL(12, 0))  AS prev_daily_sales,
    CAST(sales_diff AS DECIMAL(12, 0))  AS sales_diff,
    CAST(sales_diff_percentage AS DECIMAL(12, 2) AS sales_diff_percentage
FROM
    SalesChange
WHERE
    ABS(sales_diff_percentage) > 50 -- 変化率が50%以上の場合
ORDER BY
    ORDER_DATE, PRODUCT_NAME, BRAND_CODE [42001-232]
2025-02-14 19:21:28.869536+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: テーブル "ORDER_DATA" が見つかりません
Table "ORDER_DATA" not found; SQL statement:
select od1_0.id,od1_0.barcode,od1_0.brand_code,od1_0.color,od1_0.item_hash_code,od1_0.order_date,od1_0.order_quantity,od1_0.product_name,od1_0.selling_price,od1_0.size,od1_0.wholesale_price from order_data od1_0 where od1_0.brand_code=? [42102-232]
2025-02-14 19:21:40.304223+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: テーブル "ORDER_DATA" が見つかりません
Table "ORDER_DATA" not found; SQL statement:
select od1_0.id,od1_0.barcode,od1_0.brand_code,od1_0.color,od1_0.item_hash_code,od1_0.order_date,od1_0.order_quantity,od1_0.product_name,od1_0.selling_price,od1_0.size,od1_0.wholesale_price from order_data od1_0 where od1_0.id=? [42102-232]
2025-02-18 02:31:18.160044+09:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "SELECT * FROM SALES_DATA ORDER_DATE [*]desc limit 10"
Syntax error in SQL statement "SELECT * FROM SALES_DATA ORDER_DATE [*]desc limit 10"; SQL statement:
SELECT * FROM SALES_DATA ORDER_DATE desc limit 10 [42000-232]
